name: Deploy to Azure

on:
  push:
    tags:        
      - '*'           # Push events to every tag not containing /
    branches:
      - main
      - feature/*
      - production/*

env:
  BUILD_ENVIRONMENT: ${{
    startsWith(github.ref_name, 'production') && 'production' ||
    github.ref_name == 'main' && 'uat' ||
    startsWith(github.ref_name,  'feature') && 'development' }}
  tf_actions_working_dir: terraform

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.var.outputs.sha_short }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Check Commit Message Format
        run: |
          set -euo pipefail
          # For a pull request, we need the 2nd to last commit
          EXTRA_ARGS=""
          if [ "${{ github.ref }}" == "pull_request" ] ; then
            EXTRA_ARGS='--skip 1'
          fi
    
          MESSAGE="$(git log -1 --pretty=format:"%s" $EXTRA_ARGS)"
          echo -e "Commit Message:\n$MESSAGE"
          npm install -g @commitlint/cli @commitlint/config-conventional
          commitlint <<< "$MESSAGE"

      - name: Set outputs
        id: var
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker buildx build --platform linux/amd64 -t ${{ secrets.ACR_LOGIN_SERVER }}/my-app-${{ env.BUILD_ENVIRONMENT }}:"${{ steps.var.outputs.sha_short }}" --target ${{ env.BUILD_ENVIRONMENT }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/my-app-${{ env.BUILD_ENVIRONMENT }}:"${{ steps.var.outputs.sha_short }}"

  terraform:
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        
      - name: Check and Create Workspace
        run: |
          if ! terraform workspace list | grep -q "${{ env.BUILD_ENVIRONMENT }}"; then
            terraform workspace new "${{ env.BUILD_ENVIRONMENT }}"
          fi

      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: Select Workspace
        run: terraform workspace select "${{ env.BUILD_ENVIRONMENT }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Display short commit
        run: echo "$sha_short"

      - name: Terraform Plan
        run: |
          set -euo pipefail
          export exitcode=0
          terraform plan -var-file="../${{ env.BUILD_ENVIRONMENT }}/${{ env.BUILD_ENVIRONMENT  }}.tfvars" \
            -var "acr_name=${{ vars.ACR_NAME }}" \
            -var "acr_login_url=https://${{ secrets.ACR_LOGIN_SERVER }}" \
            -var "docker_image_name=my-app-${{ env.BUILD_ENVIRONMENT }}:${{ needs.build-and-push.outputs.output1 }}" \
            -var "subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}"

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo "Error: Terraform plan failed"
            exit 1
          else
            echo "Terraform plan was successful"
            exit 0
          fi

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -var-file="../${{ env.BUILD_ENVIRONMENT }}/${{ env.BUILD_ENVIRONMENT  }}.tfvars" \
            -var "acr_name=${{ vars.ACR_NAME }}" \
            -var "acr_login_url=https://${{ secrets.ACR_LOGIN_SERVER }}" \
            -var "docker_image_name=my-app-${{ env.BUILD_ENVIRONMENT }}:${{ needs.build-and-push.outputs.output1 }}" \
            -var "subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}"
     
      - name: validate endpoint of webapp
        run: |
          part1="https://"
          part2=$(terraform output azurerm_container_app_url)
          echo "part2: $part2"
          part3=$(echo $part2|sed -e 's/^"//' -e 's/"$//')
          requestURL=$part1$part3
          echo "requestURL: $requestURL"
          statuscode=$(eval "curl -s -o /dev/null -w '%{http_code}' $requestURL")
          echo "statuscode: $statuscode"
          if [ $statuscode -ne 200 ]; then
            echo "Error: Endpoint didn't work"
            exit 1
          else
            echo "Webapp deployment and test was successful"
            exit 0
          fi

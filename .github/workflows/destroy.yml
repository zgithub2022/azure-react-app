name: Destroy Azure Environment

on:
  push:
    branches:
      - main/destroy*
      - production/destroy*
      - feature/destroy*

env:
  BUILD_ENVIRONMENT: ${{
    startsWith(github.ref_name, 'production') && 'production' ||
    startsWith(github.ref_name, 'main') && 'uat' ||
    startsWith(github.ref_name, 'feature') && 'development' }}
  tf_actions_working_dir: terraform

jobs:
  job:
    runs-on: ubuntu-latest
    steps:
      - name: write a message
        run: echo "destroying the environment"

  terraform:
    runs-on: ubuntu-latest
    needs: job
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -input=false
        
      - name: Check and Create Workspace
        run: |
          if ! terraform workspace list | grep -q "${{ env.BUILD_ENVIRONMENT }}"; then
            terraform workspace new "${{ env.BUILD_ENVIRONMENT }}"
          fi

      - name: Select Workspace
        run: terraform workspace select "${{ env.BUILD_ENVIRONMENT }}"

      - name: Terraform Plan
        run: |
          set -euo pipefail
          export exitcode=0
          terraform plan -var-file="../${{ env.BUILD_ENVIRONMENT }}/${{ env.BUILD_ENVIRONMENT  }}.tfvars" \
            -var "acr_password=${{ secrets.ACR_PASSWORD }}" \
            -var "acr_username=${{ secrets.ACR_USERNAME }}" \
            -var "acr_login_url=https://${{ secrets.ACR_LOGIN_SERVER }}" \
            -var "docker_image_name=my-app-${{ env.BUILD_ENVIRONMENT }}:${{ needs.build-and-push.outputs.output1 }}"

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo "Error: Terraform plan failed"
            exit 1
          else
            echo "Terraform plan was successful"
            exit 0
          fi
      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -var-file="../${{ env.BUILD_ENVIRONMENT }}/${{ env.BUILD_ENVIRONMENT  }}.tfvars" \
            -var "acr_password=${{ secrets.ACR_PASSWORD }}" \
            -var "acr_username=${{ secrets.ACR_USERNAME }}" \
            -var "acr_login_url=https://${{ secrets.ACR_LOGIN_SERVER }}" \
            -var "docker_image_name=my-app-${{ env.BUILD_ENVIRONMENT }}:latest"
